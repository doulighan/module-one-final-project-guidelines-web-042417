c
n
display @in_comments
q
@comments[1].post
@current_page
@last_page
@comments[1]
@comments
q
@comments
c
q
Post.first
Post.all
quit
c
q
s
display comment
s
hashes[9]
hashes[10]
hashes.length
n
hashes.length
n
hashes.length
n
hashes.length
n
c
n
hashes.last
n
hashes[1]
n
hashes[1]
hashes
q
hashes
q
n
s
n
display result
exit
q
a = _
comments[0].first
comments.flatten.flatten.flatten.length
comments.flatten.flatten.length
comments.flatten.flatten
comments.flatten.length
comments.length
comments.map {|comment| comment.count}.inject(:+)
comments.map {|comment| comment.count}.inject(:+)}
comments[0].count
comments[0]
comment[0]
comments[0]
comments.class
comments
q
c
n
result.length
n
result.length
n
result.length
n
result.length
n
s
result.length
n
s
c
n
s
n
s
n
s
n
display result
result
exit
b = a[0]["data"]["children"]
b = a[0]["data"]
a[0]["data"]
a = api["data"]["children"]
a = _
api["data"]["children"]
api = api.first
api.first["data"]["children"].first["data"]["children"].length
api
api[0]["data"]["children"].length
api["data"]["children"].length
q
api["data"]["children"].length
q
JSON.parse(RestClient.get("https://api.reddit.com/r/#{post.subreddit}/comments/#{post.post_id[3..-1]}?sort=old.json")).class
q
c
exit
api[0]["data"]
api["data"]
api
c
q
api[0]["data"]["children"]
api[0]["data"]
api["data"]
api
api["data"]
api["data"]["children"]
api[0]["data"]["children"]["data"]["body"]
api[0]
